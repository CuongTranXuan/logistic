<?php

/**
 * This is the model base class for the table "{{delivery_order}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DeliveryOrder".
 *
 * Columns in table "{{delivery_order}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $active
 * @property integer $created_time
 * @property integer $updated_time
 * @property integer $user_id
 * @property string $delivery_order_code
 * @property string $description
 * @property double $total_price
 * @property double $total_weight
 * @property integer $is_paid
 * @property double $deposit_amount
 * @property double $delivery_price
 * @property double $total_real_price
 * @property string $storehouse_name
 * @property integer $status
 *
 */
abstract class BaseDeliveryOrder extends SModel {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{delivery_order}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'DeliveryOrder|DeliveryOrders', $n);
	}

	public static function representingColumn() {
		return 'delivery_order_code';
	}

	public function rules() {
		return array(
			array('created_time, updated_time, user_id, delivery_order_code, description, storehouse_name', 'required'),
			array('active, created_time, updated_time, user_id, is_paid, status', 'numerical', 'integerOnly'=>true),
			array('total_price, total_weight, deposit_amount, delivery_price, total_real_price', 'numerical'),
			array('delivery_order_code', 'length', 'max'=>50),
			array('description', 'length', 'max'=>500),
			array('storehouse_name', 'length', 'max'=>100),
			array('active, total_price, total_weight, is_paid, deposit_amount, delivery_price, total_real_price, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, active, created_time, updated_time, user_id, delivery_order_code, description, total_price, total_weight, is_paid, deposit_amount, delivery_price, total_real_price, storehouse_name, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'active' => Yii::t('app', 'Active'),
			'created_time' => Yii::t('app', 'Created Time'),
			'updated_time' => Yii::t('app', 'Updated Time'),
			'user_id' => Yii::t('app', 'User'),
			'delivery_order_code' => Yii::t('app', 'Delivery Order Code'),
			'description' => Yii::t('app', 'Description'),
			'total_price' => Yii::t('app', 'Total Price'),
			'total_weight' => Yii::t('app', 'Total Weight'),
			'is_paid' => Yii::t('app', 'Is Paid'),
			'deposit_amount' => Yii::t('app', 'Deposit Amount'),
			'delivery_price' => Yii::t('app', 'Delivery Price'),
			'total_real_price' => Yii::t('app', 'Total Real Price'),
			'storehouse_name' => Yii::t('app', 'Storehouse Name'),
			'status' => Yii::t('app', 'Status'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('active', $this->active);
		$criteria->compare('created_time', $this->created_time);
		$criteria->compare('updated_time', $this->updated_time);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('delivery_order_code', $this->delivery_order_code, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('total_price', $this->total_price);
		$criteria->compare('total_weight', $this->total_weight);
		$criteria->compare('is_paid', $this->is_paid);
		$criteria->compare('deposit_amount', $this->deposit_amount);
		$criteria->compare('delivery_price', $this->delivery_price);
		$criteria->compare('total_real_price', $this->total_real_price);
		$criteria->compare('storehouse_name', $this->storehouse_name, true);
		$criteria->compare('status', $this->status);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}