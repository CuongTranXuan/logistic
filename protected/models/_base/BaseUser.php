<?php

/**
 * This is the model base class for the table "{{user}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "{{user}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $active
 * @property integer $created_time
 * @property integer $updated_time
 * @property string $name
 * @property string $email
 * @property string $password
 * @property integer $is_email_active
 * @property string $email_active_token
 * @property integer $google_id
 * @property string $google_token
 * @property string $phone
 * @property string $image
 * @property string $image_thumbnail
 * @property string $facebook_id
 * @property string $facebook_access_token
 * @property integer $collaborator_group_id
 * @property string $skype
 * @property string $address
 * @property integer $customer_type_id
 * @property integer $collaborator_id
 *
 */
abstract class BaseUser extends SModel {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{user}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('created_time, updated_time, name, email, password', 'required'),
			array('active, created_time, updated_time, is_email_active, google_id, collaborator_group_id, customer_type_id, collaborator_id', 'numerical', 'integerOnly'=>true),
			array('name, password, email_active_token, image, image_thumbnail', 'length', 'max'=>100),
			array('email, facebook_id, skype', 'length', 'max'=>50),
			array('google_token', 'length', 'max'=>3000),
			array('phone', 'length', 'max'=>20),
			array('facebook_access_token', 'length', 'max'=>1000),
			array('address', 'length', 'max'=>200),
			array('active, is_email_active, email_active_token, google_id, google_token, phone, image, image_thumbnail, facebook_id, facebook_access_token, collaborator_group_id, skype, address, customer_type_id, collaborator_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, active, created_time, updated_time, name, email, password, is_email_active, email_active_token, google_id, google_token, phone, image, image_thumbnail, facebook_id, facebook_access_token, collaborator_group_id, skype, address, customer_type_id, collaborator_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'active' => Yii::t('app', 'Active'),
			'created_time' => Yii::t('app', 'Created Time'),
			'updated_time' => Yii::t('app', 'Updated Time'),
			'name' => Yii::t('app', 'Name'),
			'email' => Yii::t('app', 'Email'),
			'password' => Yii::t('app', 'Password'),
			'is_email_active' => Yii::t('app', 'Is Email Active'),
			'email_active_token' => Yii::t('app', 'Email Active Token'),
			'google_id' => Yii::t('app', 'Google'),
			'google_token' => Yii::t('app', 'Google Token'),
			'phone' => Yii::t('app', 'Phone'),
			'image' => Yii::t('app', 'Image'),
			'image_thumbnail' => Yii::t('app', 'Image Thumbnail'),
			'facebook_id' => Yii::t('app', 'Facebook'),
			'facebook_access_token' => Yii::t('app', 'Facebook Access Token'),
			'collaborator_group_id' => Yii::t('app', 'Collaborator Group'),
			'skype' => Yii::t('app', 'Skype'),
			'address' => Yii::t('app', 'Address'),
			'customer_type_id' => Yii::t('app', 'Customer Type'),
			'collaborator_id' => Yii::t('app', 'Collaborator'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('active', $this->active);
		$criteria->compare('created_time', $this->created_time);
		$criteria->compare('updated_time', $this->updated_time);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('is_email_active', $this->is_email_active);
		$criteria->compare('email_active_token', $this->email_active_token, true);
		$criteria->compare('google_id', $this->google_id);
		$criteria->compare('google_token', $this->google_token, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('image_thumbnail', $this->image_thumbnail, true);
		$criteria->compare('facebook_id', $this->facebook_id, true);
		$criteria->compare('facebook_access_token', $this->facebook_access_token, true);
		$criteria->compare('collaborator_group_id', $this->collaborator_group_id);
		$criteria->compare('skype', $this->skype, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('customer_type_id', $this->customer_type_id);
		$criteria->compare('collaborator_id', $this->collaborator_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}